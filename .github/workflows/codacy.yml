# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '23 3 * * 6'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    outputs:
      sarif_files: ${{ steps.list_sarif.outputs.files_json }}
      sarif_files_str: ${{ steps.list_sarif.outputs.files_str }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          tool: eslint
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      - name: Split SARIF per run (stream-safe)
        shell: bash
        run: |
          set -euo pipefail

          input="results.sarif"

          if ! jq -e 'has("runs") and (.runs | type == "array") and (.runs | length > 0)' "$input" > /dev/null; then
            echo "No runs found in $input. Nothing to split."
            exit 0
          fi

          find . -maxdepth 1 -type f -name 'results-*.sarif' -delete || true

          jq -c '
            .runs[]
            | {
                "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                "version": "2.1.0",
                "runs": [ . ]
              }
          ' "$input" \
          | awk 'BEGIN{i=0} { fn=sprintf("results-%d.sarif", i++); print > fn; close(fn) }'

          echo "Created split files:"
          ls -1 results-*.sarif || true
      - name: Sanitize SARIF files
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          files=(results-*.sarif)
          if (( ${#files[@]} == 0 )); then
            echo "No SARIF files to sanitize."
            exit 0
          fi

          for f in "${files[@]}"; do
            tmp="${f}.clean"
            jq '
              with_entries(select(.key != ""))
              | if has("$schema") then . else . + {"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"} end
              | .version = "2.1.0"
            ' "$f" > "$tmp"
            mv "$tmp" "$f"
          done

          echo "Sanitized: ${files[*]}"
      - name: List SARIF files (Python)
        id: list_sarif
        shell: bash
        run: |
          python3 - <<'PY'
          import glob
          import json
          import os

          files = sorted(glob.glob("results-*.sarif"))
          entries = [{"index": idx, "file": path} for idx, path in enumerate(files)]

          output_path = os.environ["GITHUB_OUTPUT"]
          with open(output_path, "a", encoding="utf-8") as handle:
              handle.write("files_json=" + json.dumps(entries) + "\n")
              handle.write("files_str<<EOF\n")
              if files:
                  handle.write("\n".join(files) + "\n")
              handle.write("EOF\n")

          print(json.dumps(entries))
          PY
      - name: Upload SARIF artifacts
        if: ${{ steps.list_sarif.outputs.files_str != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: sarif-results
          path: results-*.sarif

  upload-sarif:
    if: ${{ needs.codacy-security-scan.outputs.sarif_files != '[]' }}
    needs: codacy-security-scan
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.codacy-security-scan.outputs.sarif_files) }}
    steps:
      - name: Download SARIF artifacts
        uses: actions/download-artifact@v4
        with:
          name: sarif-results
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.file }}
          category: codacy-${{ matrix.index }}
