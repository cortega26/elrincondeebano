# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '23 3 * * 6'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    outputs:
      sarif_files: ${{ steps.sarif-list.outputs.files }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          tool: eslint
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      - name: Split SARIF per run
        run: |
          jq -c '.runs[]' results.sarif | nl -v0 -w1 | while read i run; do
            echo "{\"$schema\":\"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\"version\":\"2.1.0\",\"runs\":[${run}]}" > results-${i}.sarif
          done
      - name: List SARIF files
        id: sarif-list
        shell: bash
        run: |
          shopt -s nullglob
          files=(results-*.sarif)

          if (( ${#files[@]} == 0 )); then
            echo 'files=[]' >> "$GITHUB_OUTPUT"
            echo "No SARIF files found."
            exit 0
          fi

          json=$(jq -cn --args "${files[@]}" '
            $ARGS.positional
            | to_entries
            | map({index: .key, file: .value})
          ')

          echo "files=${json}" >> "$GITHUB_OUTPUT"
          echo "Discovered SARIF files:"
          echo "${json}"
      - name: Upload SARIF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sarif-results
          path: results-*.sarif

  upload-sarif:
    needs: codacy-security-scan
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.codacy-security-scan.outputs.sarif_files) }}
    steps:
      - name: Download SARIF artifacts
        uses: actions/download-artifact@v4
        with:
          name: sarif-results
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.file }}
          category: codacy-${{ matrix.index }}
