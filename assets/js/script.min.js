"use strict";

// Main application module wrapper
(() => {
    // Module definition helper
    var moduleDefiner = (moduleFunc, exports) => () => (
        exports || moduleFunc((exports = { exports: {} }).exports, exports),
        exports.exports
    );

    // Main application module
    var mainModule = moduleDefiner((moduleExports, module) => {

        // ============================================================================
        // SERVICE WORKER CONFIGURATION AND MANAGEMENT
        // ============================================================================

        const serviceWorkerConfig = {
            path: "/service-worker.js",
            scope: "/",
            updateCheckInterval: 300000 // 5 minutes
        };

        /**
         * Initialize service worker if supported
         */
        function initializeServiceWorker() {
            if (!("serviceWorker" in navigator)) {
                console.warn("Service workers are not supported in this browser");
                return;
            }

            window.addEventListener("load", async () => {
                try {
                    await registerServiceWorker();
                } catch (error) {
                    console.error("Service Worker initialization failed:", error);
                    showErrorNotification("Failed to initialize service worker. Some features may not work offline.");
                }
            });
        }

        /**
         * Register the service worker
         */
        async function registerServiceWorker() {
            try {
                const registration = await navigator.serviceWorker.register(
                    serviceWorkerConfig.path,
                    { scope: serviceWorkerConfig.scope }
                );

                console.log("ServiceWorker registered successfully:", registration.scope);

                setupUpdateHandler(registration);
                setupUpdateChecker(registration);
                setupControllerChangeHandler();
                setupOfflineIndicator();

            } catch (error) {
                console.error("ServiceWorker registration failed:", error);
                throw error;
            }
        }

        /**
         * Handle service worker updates
         */
        function setupUpdateHandler(registration) {
            registration.addEventListener("updatefound", () => {
                const newWorker = registration.installing;
                newWorker.addEventListener("statechange", () => {
                    if (newWorker.state === "installed" && navigator.serviceWorker.controller) {
                        newWorker.postMessage({ type: "SKIP_WAITING" });
                    }
                });
            });
        }

        /**
         * Set up periodic update checking
         */
        function setupUpdateChecker(registration) {
            checkForUpdates(registration);
            setInterval(() => {
                checkForUpdates(registration);
            }, serviceWorkerConfig.updateCheckInterval);
        }

        /**
         * Check for service worker and product data updates
         */
        async function checkForUpdates(registration) {
            try {
                await registration.update();

                const response = await fetch("/_products/product_data.json", {
                    headers: {
                        "Cache-Control": "no-cache",
                        "Pragma": "no-cache"
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    const currentVersion = data.version;
                    const storedVersion = localStorage.getItem("productDataVersion");

                    if (currentVersion !== storedVersion) {
                        registration.active?.postMessage({ type: "INVALIDATE_PRODUCT_CACHE" });
                        localStorage.setItem("productDataVersion", currentVersion);
                        showUpdateNotification(null, "New product data available");
                    }
                }
            } catch (error) {
                console.warn("Update check failed:", error);
            }
        }

        /**
         * Handle service worker controller changes
         */
        function setupControllerChangeHandler() {
            let refreshing = false;
            navigator.serviceWorker.addEventListener("controllerchange", () => {
                if (!refreshing) {
                    refreshing = true;
                    window.location.reload();
                }
            });
        }

        /**
         * Set up offline/online indicator
         */
        function setupOfflineIndicator() {
            const updateOfflineStatus = () => {
                const indicator = document.getElementById("offline-indicator");
                if (indicator) {
                    indicator.style.display = navigator.onLine ? "none" : "block";
                }

                if (!navigator.onLine) {
                    showOfflineNotification("You are currently offline. Some features may be limited.");
                }
            };

            window.addEventListener("online", updateOfflineStatus);
            window.addEventListener("offline", updateOfflineStatus);
            updateOfflineStatus();
        }

        // ============================================================================
        // NOTIFICATION SYSTEM
        // ============================================================================

        /**
         * Show update notification
         */
        function showUpdateNotification(worker, message = "Una versión está disponible") {
            const notification = createNotification(
                message,
                "Actualizar ahora",
                "Después",
                () => {
                    if (worker) {
                        worker.postMessage({ type: "SKIP_WAITING" });
                    } else {
                        window.location.reload();
                    }
                }
            );
            displayNotification(notification);
        }

        /**
         * Show error notification
         */
        function showErrorNotification(message) {
            const notification = createNotification(
                message,
                "Reload",
                "Dismiss",
                () => window.location.reload()
            );
            displayNotification(notification);
        }

        /**
         * Show offline notification
         */
        function showOfflineNotification(message) {
            const notification = createNotification(
                message,
                "Retry",
                "Dismiss",
                () => window.location.reload()
            );
            displayNotification(notification);
        }

        /**
         * Create notification element
         */
        function createNotification(message, primaryText, secondaryText, primaryAction) {
            const notification = document.createElement("div");
            notification.className = "notification-toast";
            notification.setAttribute("role", "alert");
            notification.setAttribute("aria-live", "polite");

            notification.innerHTML = `
                <div class="notification-content">
                    <p>${message}</p>
                    <div class="notification-actions">
                        <button class="primary-action">${primaryText}</button>
                        <button class="secondary-action">${secondaryText}</button>
                    </div>
                </div>
            `;

            notification.querySelector(".primary-action").addEventListener("click", () => {
                primaryAction();
                notification.remove();
            });

            notification.querySelector(".secondary-action").addEventListener("click", () => {
                notification.remove();
            });

            return notification;
        }

        /**
         * Display notification to user
         */
        function displayNotification(notification) {
            const existingNotification = document.querySelector(".notification-toast");
            if (existingNotification) {
                existingNotification.remove();
            }

            document.body.appendChild(notification);

            // Auto-remove after 5 minutes
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    notification.remove();
                }
            }, 5 * 60 * 1000);
        }

        // Initialize service worker if available
        if (typeof navigator !== "undefined" && "serviceWorker" in navigator) {
            initializeServiceWorker();
        }

        // ============================================================================
        // UTILITY FUNCTIONS
        // ============================================================================

        /**
         * Memoization utility with LRU cache
         */
        const memoizeWithLRU = (func, maxSize = 100) => {
            const cache = new Map();

            return (...args) => {
                const key = JSON.stringify(args);

                if (cache.has(key)) {
                    return cache.get(key);
                }

                const result = func(...args);

                if (cache.size >= maxSize) {
                    const firstKey = cache.keys().next().value;
                    cache.delete(firstKey);
                }

                cache.set(key, result);
                return result;
            };
        };

        /**
         * Debounce utility
         */
        const debounce = (func, delay) => {
            let timeoutId;
            return (...args) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func(...args), delay);
            };
        };

        /**
         * Generate stable ID for products
         */
        const generateStableId = (product) => {
            const input = `${product.name}-${product.category}`.toLowerCase();
            let hash = 0;

            for (let i = 0; i < input.length; i++) {
                const char = input.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // Convert to 32-bit integer
            }

            return `pid-${Math.abs(hash)}`;
        };

        /**
         * Sanitize HTML content
         */
        const sanitizeHTML = (html) => {
            const div = document.createElement("div");
            div.textContent = html;
            return div.innerHTML;
        };

        // ============================================================================
        // PRODUCT DATA MANAGEMENT
        // ============================================================================

        /**
         * Fetch and process product data
         */
        const fetchProductData = async () => {
            try {
                const response = await fetch("/_products/product_data.json", {
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error. Status: ${response.status}`);
                }

                const data = await response.json();

                return data.products.map(product => ({
                    ...product,
                    id: generateStableId(product),
                    name: sanitizeHTML(product.name),
                    description: sanitizeHTML(product.description),
                    category: sanitizeHTML(product.category)
                }));

            } catch (error) {
                console.error("Error al obtener productos:", error);
                showError(`Error al cargar los productos. Por favor, verifique su conexión a internet e inténtelo de nuevo. (Error: ${error.message})`);
                throw error;
            }
        };

        // ============================================================================
        // DOM UTILITIES
        // ============================================================================

        /**
         * Create DOM element with attributes and children
         */
        const createElement = (tagName, attributes = {}, children = []) => {
            const element = document.createElement(tagName);

            Object.entries(attributes).forEach(([key, value]) => {
                if (key === "text") {
                    element.textContent = value;
                } else {
                    element.setAttribute(key, value);
                }
            });

            children.forEach(child => {
                if (typeof child === "string") {
                    element.appendChild(document.createTextNode(child));
                } else {
                    element.appendChild(child);
                }
            });

            return element;
        };

        /**
         * Show error message to user
         */
        const showError = (message) => {
            const errorElement = createElement("div", {
                class: "error-message",
                role: "alert"
            }, [
                createElement("p", {}, [message]),
                createElement("button", {
                    class: "retry-button"
                }, ["Intentar nuevamente"])
            ]);

            const container = document.getElementById("product-container");
            if (container) {
                container.innerHTML = "";
                container.appendChild(errorElement);

                errorElement.querySelector(".retry-button").addEventListener("click", initializeApp);
            } else {
                console.error("Contenedor de productos no encontrado");
            }
        };

        // Global error handler
        if (typeof window !== "undefined") {
            window.addEventListener("error", (event) => {
                console.error("Error global:", event.error);
                showError("Ocurrió un error inesperado. Por favor, recarga la página.");
            });
        }

        // ============================================================================
        // MAIN APPLICATION INITIALIZATION
        // ============================================================================

        /**
         * Initialize the main application
         */
        const initializeApp = async () => {
            console.log("Initializing app...");

            // Load DOMPurify if not available
            if (typeof DOMPurify === "undefined") {
                try {
                    await new Promise((resolve, reject) => {
                        const script = document.createElement("script");
                        script.src = "https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js";
                        script.onload = resolve;
                        script.onerror = reject;
                        document.head.appendChild(script);
                    });
                } catch (error) {
                    console.error("Failed to load DOMPurify:", error);
                    showError("Failed to load required dependencies. Please refresh the page.");
                    return;
                }
            }

            // Get DOM elements
            const navbarContainer = document.getElementById("navbar-container");
            const footerContainer = document.getElementById("footer-container");
            const productContainer = document.getElementById("product-container");
            const sortOptions = document.getElementById("sort-options");
            const filterKeyword = document.getElementById("filter-keyword");

            // Application state
            let products = [];
            let cart = JSON.parse(localStorage.getItem("cart")) || [];

            // ============================================================================
            // OFFLINE STATUS MANAGEMENT
            // ============================================================================

            const updateOfflineStatus = () => {
                const indicator = document.getElementById("offline-indicator");
                if (indicator) {
                    indicator.style.display = navigator.onLine ? "none" : "block";
                }

                if (!navigator.onLine) {
                    console.log("App is offline. Using cached data if available.");
                }
            };

            // ============================================================================
            // COMPONENT LOADING
            // ============================================================================

            /**
             * Load HTML component
             */
            const loadComponent = async (container, componentPath) => {
                if (!container) {
                    console.warn(`Contenedor no encontrado para el componente: ${componentPath}`);
                    return;
                }

                try {
                    const response = await fetch(componentPath);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const html = await response.text();
                    const sanitizedHTML = DOMPurify.sanitize(html, {
                        USE_PROFILES: { html: true },
                        ALLOWED_TAGS: [
                            "div", "span", "p", "h1", "h2", "h3", "h4", "h5", "h6",
                            "ul", "ol", "li", "a", "img", "br", "strong", "em",
                            "button", "nav", "footer", "header", "main", "section"
                        ],
                        ALLOWED_ATTR: [
                            "href", "src", "alt", "class", "id", "style",
                            "aria-label", "role", "type", "data-bs-toggle",
                            "data-bs-target", "aria-controls", "aria-expanded"
                        ]
                    });

                    container.innerHTML = "";
                    const tempDoc = new DOMParser().parseFromString(sanitizedHTML, "text/html");

                    Array.from(tempDoc.body.children).forEach(child => {
                        container.appendChild(child.cloneNode(true));
                    });

                } catch (error) {
                    console.error("Error al cargar componente:", {
                        component: componentPath,
                        message: error.message
                    });
                    throw error;
                }
            };

            /**
             * Load all page components
             */
            const loadComponents = async () => {
                try {
                    await Promise.all([
                        loadComponent(navbarContainer, "/pages/navbar.html"),
                        loadComponent(footerContainer, "/pages/footer.html")
                    ]);
                    console.log("Components loaded successfully");
                } catch (error) {
                    console.error("Error al cargar componentes:", error);
                    showError("Error al cargar los componentes de la página. Por favor, actualice la página o verifique su conexión a internet.");
                }
            };

            // ============================================================================
            // PRICE FORMATTING
            // ============================================================================

            /**
             * Format price with discount
             */
            const formatPrice = (price, discount, currency = "CLP") => {
                const formatter = new Intl.NumberFormat("es-CL", {
                    style: "currency",
                    currency: currency,
                    minimumFractionDigits: 0
                });

                const formattedPrice = formatter.format(price);

                if (discount) {
                    const discountedPrice = price - discount;
                    const formattedDiscountedPrice = formatter.format(discountedPrice);

                    return createElement("div", {
                        class: "precio-container"
                    }, [
                        createElement("span", {
                            class: "precio-descuento",
                            "aria-label": "Precio con descuento"
                        }, [formattedDiscountedPrice]),
                        createElement("span", {
                            class: "precio-original",
                            "aria-label": "Precio original"
                        }, [
                            createElement("span", {
                                class: "tachado"
                            }, [formattedPrice])
                        ])
                    ]);
                }

                return createElement("div", {
                    class: "precio-container"
                }, [
                    createElement("span", {
                        class: "precio",
                        "aria-label": "Precio"
                    }, [formattedPrice])
                ]);
            };

            // ============================================================================
            // CART MANAGEMENT
            // ============================================================================

            /**
             * Create quantity control widget
             */
            const createQuantityControl = (product) => {
                const container = createElement("div", {
                    class: "quantity-control"
                });

                const decreaseBtn = createElement("button", {
                    class: "quantity-btn",
                    "aria-label": "Decrease quantity"
                }, ["-"]);

                const increaseBtn = createElement("button", {
                    class: "quantity-btn",
                    "aria-label": "Increase quantity"
                }, ["+"]);

                const input = createElement("input", {
                    type: "number",
                    class: "quantity-input",
                    value: Math.max(getProductQuantity(product.id), 1),
                    min: "1",
                    max: "50",
                    "aria-label": "Quantity",
                    "data-id": product.id
                });

                decreaseBtn.addEventListener("click", () => updateQuantity(product, -1));
                increaseBtn.addEventListener("click", () => updateQuantity(product, 1));
                input.addEventListener("change", (event) => {
                    const newQuantity = parseInt(event.target.value, 10);
                    const currentQuantity = getProductQuantity(product.id);
                    updateQuantity(product, newQuantity - currentQuantity);
                });

                container.appendChild(decreaseBtn);
                container.appendChild(input);
                container.appendChild(increaseBtn);

                return container;
            };

            /**
             * Get product quantity in cart
             */
            const getProductQuantity = (productId) => {
                const cartItem = cart.find(item => item.id === productId);
                return cartItem ? cartItem.quantity : 0;
            };

            /**
             * Render products to DOM
             */
            const renderProducts = (productsToRender) => {
                const fragment = document.createDocumentFragment();
                const isInPagesDirectory = window.location.pathname.includes("/pages/");

                productsToRender.forEach(product => {
                    const {
                        id, name, description, image_path, price, discount, stock
                    } = product;

                    const productElement = createElement("div", {
                        class: `producto col-12 col-sm-6 col-md-4 col-lg-3 mb-4 ${stock ? "" : "agotado"}`,
                        "aria-label": `Product: ${name}`
                    });

                    const card = createElement("div", {
                        class: "card"
                    });

                    // Handle image path for different directory structures
                    let imagePath;
                    if (isInPagesDirectory) {
                        imagePath = `../${image_path.replace(/^\//, "")}`;
                    } else {
                        imagePath = image_path;
                    }

                    const image = createElement("img", {
                        "data-src": imagePath,
                        alt: name,
                        class: "card-img-top lazyload"
                    });

                    card.appendChild(image);

                    const cardBody = createElement("div", {
                        class: "card-body"
                    });

                    cardBody.appendChild(createElement("h3", {
                        class: "card-title"
                    }, [name]));

                    cardBody.appendChild(createElement("p", {
                        class: "card-text"
                    }, [description]));

                    cardBody.appendChild(formatPrice(price, discount));

                    const cartItem = cart.find(item => item.id === id);
                    const quantityInCart = cartItem ? cartItem.quantity : 0;

                    if (quantityInCart > 0) {
                        const quantityControl = createQuantityControl(product);
                        cardBody.appendChild(quantityControl);

                        const quantityInput = quantityControl.querySelector(".quantity-input");
                        if (quantityInput) {
                            quantityInput.value = quantityInCart;
                        }
                    } else {
                        const addButton = createElement("button", {
                            class: "btn btn-primary mt-2",
                            "data-id": id,
                            "aria-label": `Add ${name} to cart`
                        }, ["Agregar"]);

                        addButton.addEventListener("click", () => {
                            addToCart(product, 1);
                            const quantityControl = createQuantityControl(product);
                            addButton.replaceWith(quantityControl);
                            quantityControl.classList.add("fade-in-up");
                        });

                        cardBody.appendChild(addButton);
                    }

                    card.appendChild(cardBody);
                    productElement.appendChild(card);
                    fragment.appendChild(productElement);
                });

                const container = document.getElementById("product-container");
                container.innerHTML = "";
                container.appendChild(fragment);

                setupLazyLoading();
            };

            /**
             * Set up lazy loading for images
             */
            const setupLazyLoading = () => {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.src = img.dataset.src;
                            img.classList.remove("lazyload");
                            observer.unobserve(img);
                        }
                    });
                }, {
                    rootMargin: "100px"
                });

                document.querySelectorAll("img.lazyload").forEach(img => {
                    imageObserver.observe(img);
                });
            };

            // ============================================================================
            // PRODUCT FILTERING AND SORTING
            // ============================================================================

            /**
             * Filter and sort products
             */
            const filterAndSortProducts = (products, keyword, sortOption) => {
                return products.filter(product => (
                    (product.name.toLowerCase().includes(keyword.toLowerCase()) ||
                        product.description.toLowerCase().includes(keyword.toLowerCase())) &&
                    product.stock
                )).sort((a, b) => sortProducts(a, b, sortOption));
            };

            /**
             * Sort products based on option
             */
            const sortProducts = (productA, productB, sortOption) => {
                if (!sortOption || sortOption === "original") {
                    return productA.originalIndex - productB.originalIndex;
                }

                const [sortBy, sortOrder] = sortOption.split("-");

                let valueA, valueB;
                if (sortBy === "price") {
                    valueA = productA.price - (productA.discount || 0);
                    valueB = productB.price - (productB.discount || 0);
                } else {
                    valueA = productA.name.toLowerCase();
                    valueB = productB.name.toLowerCase();
                }

                if (sortOrder === "asc") {
                    return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
                } else {
                    return valueB < valueA ? -1 : valueB > valueA ? 1 : 0;
                }
            };

            // Memoized filter function for performance
            const memoizedFilter = memoizeWithLRU(filterAndSortProducts);

            /**
             * Update product display
             */
            const updateProductDisplay = () => {
                try {
                    const sortOption = sortOptions.value || "original";
                    const keyword = filterKeyword.value.trim();
                    const filteredProducts = memoizedFilter(products, keyword, sortOption);
                    renderProducts(filteredProducts);
                } catch (error) {
                    console.error("Error al actualizar visualización de productos:", error);
                    showError("Error al actualizar la visualización de productos. Por favor, intenta más tarde.");
                }
            };

            // Debounced update function
            const debouncedUpdate = debounce(updateProductDisplay, 300);

            /**
             * Update cart badge
             */
            const updateCartBadge = () => {
                const badge = document.getElementById("cart-count");
                const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
                badge.textContent = totalItems;
                badge.setAttribute("aria-label", `${totalItems} items in cart`);
            };

            /**
             * Add product to cart
             */
            const addToCart = (product, quantity) => {
                try {
                    const existingItem = cart.find(item => item.id === product.id);

                    if (existingItem) {
                        existingItem.quantity = Math.min(existingItem.quantity + quantity, 50);
                    } else {
                        cart.push({
                            id: product.id,
                            name: product.name,
                            description: product.description,
                            price: product.price,
                            discount: product.discount,
                            image_path: product.image_path,
                            quantity: Math.min(quantity, 50),
                            category: product.category,
                            stock: product.stock
                        });
                    }

                    saveCart();
                    updateCartBadge();
                    renderCartItems();

                    // Update quantity input if visible
                    const quantityInput = document.querySelector(`[data-id="${product.id}"].quantity-input`);
                    if (quantityInput) {
                        quantityInput.value = Math.max(getProductQuantity(product.id), 1);
                    }
                } catch (error) {
                    console.error("Error al agregar al carrito:", error);
                    showError("Error al agregar el artículo al carrito. Por favor, intenta nuevamente.");
                }
            };

            /**
             * Remove product from cart
             */
            const removeFromCart = (productId) => {
                try {
                    cart = cart.filter(item => item.id !== productId);
                    saveCart();
                    updateCartBadge();
                    renderCartItems();
                    updateProductDisplay();
                } catch (error) {
                    console.error("Error al eliminar del carrito:", error);
                    showError("Error al eliminar el artículo del carrito. Por favor, intenta nuevamente.");
                }
            };

            /**
             * Update product quantity in cart
             */
            const updateQuantity = (product, quantityChange) => {
                try {
                    const existingItem = cart.find(item => item.id === product.id);
                    const newQuantity = existingItem ? existingItem.quantity + quantityChange : 1;

                    if (newQuantity <= 0) {
                        removeFromCart(product.id);
                        updateProductDisplay();
                    } else if (newQuantity <= 50) {
                        if (existingItem) {
                            existingItem.quantity = newQuantity;
                        } else {
                            addToCart(product, 1);
                        }

                        saveCart();
                        updateCartBadge();
                        renderCartItems();

                        // Update UI with animation
                        const quantityInput = document.querySelector(`[data-id="${product.id}"].quantity-input`);
                        if (quantityInput) {
                            quantityInput.value = newQuantity;
                            quantityInput.classList.add("quantity-changed");
                            setTimeout(() => {
                                quantityInput.classList.remove("quantity-changed");
                            }, 300);
                        }
                    }
                } catch (error) {
                    console.error("Error al actualizar cantidad:", error);
                    showError("Error al actualizar la cantidad. Por favor, intenta nuevamente.");
                }
            };

            /**
             * Clear entire cart
             */
            const clearCart = () => {
                try {
                    cart = [];
                    saveCart();
                    updateCartBadge();
                    renderCartItems();
                    updateProductDisplay();
                } catch (error) {
                    console.error("Error al vaciar el carrito:", error);
                    showError("Error al vaciar el carrito. Por favor, inténtelo de nuevo.");
                }
            };

            /**
             * Save cart to localStorage
             */
            const saveCart = () => {
                try {
                    localStorage.setItem("cart", JSON.stringify(cart));
                } catch (error) {
                    console.error("Error al guardar el carrito:", error);
                    showError("Error al guardar el carrito. Tus cambios podrían no persistir.");
                }
            };

            /**
             * Render cart items in the cart sidebar
             */
            // Find the renderCart function (around line 485) and modify it like this:

            const renderCart = () => {
                const cartItems = document.getElementById('cart-items');
                const cartTotal = document.getElementById('cart-total');
                cartItems.innerHTML = '';

                let total = 0;

                cart.forEach(item => {
                    const discountedPrice = item.price - (item.discount || 0);

                    // Contenedor principal en fila
                    const itemElement = createSafeElement('div', {
                        class: 'cart-item mb-3 d-flex align-items-center',
                        'aria-label': `Cart item: ${item.name}`,
                        style: 'flex-direction: row; align-items: center;'
                    });

                    // Contenido textual (flex-grow: 1)
                    const contentContainer = createSafeElement('div', {
                        class: 'cart-item-content flex-grow-1'
                    });

                    contentContainer.appendChild(
                        createSafeElement('div', { class: 'fw-bold mb-1' }, [item.name])
                    );

                    const quantityContainer = createSafeElement('div', { class: 'mb-2' });
                    const decreaseBtn = createSafeElement('button', {
                        class: 'btn btn-sm btn-secondary decrease-quantity',
                        'data-id': item.id,
                        'aria-label': `Decrease quantity of ${item.name}`
                    }, ['-']);
                    const increaseBtn = createSafeElement('button', {
                        class: 'btn btn-sm btn-secondary increase-quantity',
                        'data-id': item.id,
                        'aria-label': `Increase quantity of ${item.name}`
                    }, ['+']);
                    const quantitySpan = createSafeElement('span', {
                        class: 'mx-2 item-quantity',
                        'aria-label': `Quantity of ${item.name}`
                    }, [item.quantity.toString()]);

                    quantityContainer.appendChild(decreaseBtn);
                    quantityContainer.appendChild(quantitySpan);
                    quantityContainer.appendChild(increaseBtn);
                    contentContainer.appendChild(quantityContainer);

                    contentContainer.appendChild(
                        createSafeElement('div', { class: 'text-muted small' },
                            [`Precio: $${discountedPrice.toLocaleString('es-CL')}`]
                        )
                    );
                    contentContainer.appendChild(
                        createSafeElement('div', { class: 'fw-bold' },
                            [`Subtotal: $${(discountedPrice * item.quantity).toLocaleString('es-CL')}`]
                        )
                    );

                    const removeBtn = createSafeElement('button', {
                        class: 'btn btn-sm btn-danger remove-item mt-2',
                        'data-id': item.id,
                        'aria-label': `Remove ${item.name} from cart`
                    }, ['Eliminar']);
                    contentContainer.appendChild(removeBtn);

                    // Ruta de la imagen
                    const isSubcategoryPage = window.location.pathname.includes('/pages/');
                    let adjustedImagePath;
                    if (isSubcategoryPage) {
                        adjustedImagePath = `../${item.image_path.replace(/^\//, '')}`;
                    } else {
                        adjustedImagePath = item.image_path;
                    }

                    // Miniatura alineada a la derecha
                    const thumbnailContainer = createSafeElement('div', {
                        class: 'cart-item-thumbnail',
                        style: 'width: 60px; height: 60px; flex-shrink: 0; margin-left: auto;'
                    });
                    const thumbnailImg = createSafeElement('img', {
                        src: adjustedImagePath,
                        alt: item.name,
                        class: 'img-fluid rounded',
                        style: 'width: 100%; height: 100%; object-fit: cover;'
                    });
                    thumbnailContainer.appendChild(thumbnailImg);

                    // Orden de inserción: contenido primero, miniatura al final
                    itemElement.appendChild(contentContainer);
                    itemElement.appendChild(thumbnailContainer);

                    cartItems.appendChild(itemElement);

                    total += discountedPrice * item.quantity;
                });

                cartTotal.textContent = `Total: $${total.toLocaleString('es-CL')}`;
                cartTotal.setAttribute('aria-label', `Total cart value: $${total.toLocaleString('es-CL')}`);

                // Mostrar u ocultar el método de pago con tarjeta de crédito
                const creditOption = document.getElementById('payment-credit-container');
                if (creditOption) {
                    if (total >= 30000) {
                        creditOption.classList.remove('d-none');
                    } else {
                        creditOption.classList.add('d-none');
                        const creditInput = creditOption.querySelector('input');
                        if (creditInput) {
                            creditInput.checked = false;
                        }
                    }
                }
            };


            /**
             * Handle checkout process
             */
            const handleCheckout = () => {
                const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

                if (!selectedPaymentMethod) {
                    alert("Por favor seleccione un método de pago");
                    return;
                }

                let orderMessage = `Mi pedido:\n\n`;

                cart.forEach(item => {
                    const itemPrice = item.price - (item.discount || 0);
                    orderMessage += `${item.name}\n`;
                    orderMessage += `Cantidad: ${item.quantity}\n`;
                    orderMessage += `Precio unitario: ${itemPrice.toLocaleString("es-CL")}\n`;
                    orderMessage += `Subtotal: ${(itemPrice * item.quantity).toLocaleString("es-CL")}\n\n`;
                });

                const total = cart.reduce((sum, item) => {
                    return sum + (item.price - (item.discount || 0)) * item.quantity;
                }, 0);

                orderMessage += `Total: ${total.toLocaleString("es-CL")}\n`;
                orderMessage += `Método de pago: ${selectedPaymentMethod.value}`;

                const whatsappMessage = encodeURIComponent(orderMessage);
                window.open(`https://wa.me/56951118901?text=${whatsappMessage}`, "_blank");
            };

            // ============================================================================
            // APPLICATION INITIALIZATION
            // ============================================================================

            try {
                // Load page components
                await loadComponents();

                // Fetch product data
                products = await fetchProductData();

                if (products.length === 0) {
                    showError("No hay productos disponibles. Por favor, intenta más tarde.");
                    return;
                }

                // Filter products by category if specified
                const categoryFilter = document.querySelector("main").dataset.category;
                if (categoryFilter) {
                    products = products.filter(product => product.category === categoryFilter);
                }

                // Set up event listeners
                sortOptions.addEventListener("change", debouncedUpdate);
                filterKeyword.addEventListener("input", debouncedUpdate);

                // Initial render
                updateProductDisplay();

                // Set up offline/online status monitoring
                window.addEventListener("online", updateOfflineStatus);
                window.addEventListener("offline", updateOfflineStatus);
                updateOfflineStatus();

                // Set up cart functionality
                const cartIcon = document.getElementById("cart-icon");
                const emptyCarcBtn = document.getElementById("empty-cart");
                const submitCartBtn = document.getElementById("submit-cart");

                cartIcon.addEventListener("click", () => {
                    if (typeof window.bootstrap !== "undefined" && window.bootstrap.Offcanvas) {
                        const cartOffcanvas = new window.bootstrap.Offcanvas(
                            document.getElementById("cartOffcanvas")
                        );
                        renderCartItems();
                        cartOffcanvas.show();
                    } else {
                        console.error("Bootstrap Offcanvas no está disponible");
                        renderCartItems();
                        const cartOffcanvas = document.getElementById("cartOffcanvas");
                        if (cartOffcanvas) {
                            cartOffcanvas.classList.add("show");
                        }
                    }
                });

                emptyCarcBtn.addEventListener("click", clearCart);
                submitCartBtn.addEventListener("click", handleCheckout);

                // Set up cart item event delegation
                document.getElementById("cart-items").addEventListener("click", (event) => {
                    const target = event.target;
                    const productId = target.closest("[data-id]")?.dataset.id;

                    if (productId) {
                        if (target.classList.contains("decrease-quantity")) {
                            updateQuantity({ id: productId }, -1);
                        } else if (target.classList.contains("increase-quantity")) {
                            updateQuantity({ id: productId }, 1);
                        } else if (target.classList.contains("remove-item")) {
                            removeFromCart(productId);
                        }
                    }
                });

                // Initialize cart badge
                updateCartBadge();

                // Performance monitoring
                if ("performance" in window) {
                    window.addEventListener("load", () => {
                        const paintEntries = performance.getEntriesByType("paint");
                        const navigationEntry = performance.getEntriesByType("navigation")[0];

                        console.log("First Contentful Paint:", paintEntries[0].startTime);
                        console.log("DOM Content Loaded:", navigationEntry.domContentLoadedEventEnd);
                        console.log("Load Time:", navigationEntry.loadEventEnd);
                    });
                }

            } catch (error) {
                console.error("Error al inicializar productos:", error);
                showError("Error al cargar productos. Por favor, inténtelo más tarde.");
            }
        };

        // ============================================================================
        // DOCUMENT READY INITIALIZATION
        // ============================================================================

        if (typeof document !== "undefined") {
            document.addEventListener("DOMContentLoaded", function () {
                initializeServiceWorker();
                initializeApp().catch(error => {
                    console.error("Error al inicializar la aplicación:", error);
                    showError("Error al inicializar la aplicación. Por favor, actualice la página.");
                });
            });
        }

        // ============================================================================
        // MODULE EXPORTS
        // ============================================================================

        if (typeof module !== "undefined") {
            module.exports = {
                generateStableId: generateStableId
            };
        }
    });

    // Initialize the main module
    mainModule();
})();
